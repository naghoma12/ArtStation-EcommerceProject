@using ArtStation_Dashboard.ViewModels.Order
@using NuGet.Protocol
@model IEnumerable<OrderVM>

@{
    var culture = System.Globalization.CultureInfo.CurrentUICulture;
    var dir = culture.TextInfo.IsRightToLeft ? "rtl" : "ltr";
    var lang = culture.Name;
}
<div class="d-flex justify-content-center my-3">
    <a class="btn btn-outline-primary mx-1 @(ViewBag.StatusFilter == null ? "active" : "")"
       href="@Url.Action("Index", new { statusFilter = (string)null, page = 1, pageSize = ViewBag.PageSize })">
        @(("الكل", "All").Localize(lang))
    </a>
    <a class="btn btn-outline-info mx-1 @(ViewBag.StatusFilter == "Placed" ? "active" : "")"
       href="@Url.Action("Index", new { statusFilter = "Placed", page = 1, pageSize = ViewBag.PageSize })">
        @(("تم الإنشاء", "Placed").Localize(lang))
    </a>
    <a class="btn btn-outline-warning mx-1 @(ViewBag.StatusFilter == "Shipped" ? "active" : "")"
       href="@Url.Action("Index", new { statusFilter = "Shipped", page = 1, pageSize = ViewBag.PageSize })">
        @(("تم الشحن", "Shipped").Localize(lang))
    </a>
    <a class="btn btn-outline-success mx-1 @(ViewBag.StatusFilter == "Delivered" ? "active" : "")"
       href="@Url.Action("Index", new { statusFilter = "Delivered", page = 1, pageSize = ViewBag.PageSize })">
        @(("تم التوصيل", "Delivered").Localize(lang))
    </a>
</div>

<div class="container-fluid py-4">
    <div class="row">
        <div class="col-12">
            <div class="card my-4">
              
                <div class="card-header p-0 position-relative mt-n4 mx-3 z-index-2">
                    <div class="bg-gradient-primary shadow-primary border-radius-lg pt-4 pb-3">
                        <h6 class="text-white text-capitalize ps-3 pe-3">@(("الطلبات","Orders").Localize(lang))</h6>
                    </div>
                </div>
                <form id="antiForgeryForm" method="post" style="display:none;">
                    @Html.AntiForgeryToken()
                </form>

               
                <div class="card-body px-0 pb-2">
                    <div id="order-table-container">
                        @Html.Partial("_OrderTablePartial", Model)
                    </div>
                 
                </div>
            </div>
        </div>
    </div>
    </div>
<nav aria-label="Page navigation">
    <ul class="pagination pagination-primary pagination-sm justify-content-center">
        @for (int i = 1; i <= ViewBag.TotalPages; i++)
        {
            var isActive = (i == ViewBag.CurrentPage) ? "active" : "";
            <li class="page-item @isActive">
                <a class="page-link" href="@Url.Action("Index", new { page = i, pageSize = ViewBag.PageSize, statusFilter = ViewBag.StatusFilter })">@i</a>

            </li>
        }
    </ul>
</nav>

@section Scripts{
    
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        function initBootstrapDropdowns() {
            $('.dropdown-toggle').dropdown();
        }

        $(document).ready(function () {
            initBootstrapDropdowns();

            // Prevent dropdown interaction from triggering row click navigation
            $(document).on('click', '.dropdown-toggle, .dropdown-menu', function (e) {
                e.stopPropagation();
            });

            // Handle status change
            $(document).on("click", ".status-change:not(.disabled)", function (e) {
                e.preventDefault();

                const $item = $(this);
                const newStatus = $item.data("status");
                const $row = $item.closest("tr");
                const orderId = $row.data("order-id");

                Swal.fire({
                    title: @Html.Raw((("Change status to", "Change status to")).Localize(lang).ToJson()) + ` «${newStatus}»?`,
                    icon: "question",
                    showCancelButton: true,
                    confirmButtonText: @Html.Raw((("Yes, update", "Yes, update")).Localize(lang).ToJson()),
                    cancelButtonText: @Html.Raw((("Cancel", "Cancel")).Localize(lang).ToJson()),
                    showLoaderOnConfirm: true,
                    preConfirm: () => {
                        return $.ajax({
                            url: '/Order/UpdateStatus',
                            type: 'POST',
                            headers: {
                                'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                            },
                            data: {
                                orderId: orderId,
                                status: newStatus
                            }
                        })
                        .then(res => {
                            if (!res.success) throw new Error(res.message || 'Error');
                            return res;
                        })
                        .catch(err => Swal.showValidationMessage(err.toString()));
                    }
                }).then(result => {
                    if (!result.isConfirmed) return;

                    Swal.fire({
                        icon: "success",
                        title: @Html.Raw((("Updated", "Updated")).Localize(lang).ToJson()),
                        showConfirmButton: false,
                        timer: 1200
                    });

                    const cls = newStatus === "Delivered" ? "btn-success"
                                : newStatus === "Shipped" ? "btn-info"
                                                          : "btn-secondary";

                    const $btn = $row.find(`#statusDropdown_${orderId}`);
                    $btn.text(newStatus)
                        .removeClass("btn-secondary btn-info btn-success")
                        .addClass(cls);

                    $row.find(".status-change").removeClass("disabled fw-bold");
                    $item.addClass("disabled fw-bold");
                });
            });
        });

        // Row click handler
        function handleRowClick(event, url) {
            const tag = event.target.tagName.toLowerCase();
            if (tag === 'input' || tag === 'select' || tag === 'button' || tag === 'a') {
                return;
            }
            window.location = url;
        }
    </script>
}