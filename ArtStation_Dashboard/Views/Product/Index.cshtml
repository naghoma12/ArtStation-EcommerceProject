@model ProductFilters
@{
    var language = ViewData["Language"] as string ?? "en";
}

<style>
    .clickable-row:hover {
        background-color: #f5f5f5;
    }

    .filter-products {
        min-width: 100%;
        padding: 10px;
        border-radius: 8px;
        border: 1px solid #ced4da;
        background-color: #fff;
        font-weight: 500;
        transition: all 0.2s ease-in-out;
        color: #6c757d;
    }

        .filter-products:focus {
            border-color: #4e73df;
            box-shadow: 0 0 0 0.2rem rgba(78, 115, 223, 0.25);
        }

</style>
<div class="container my-4">
    <div class="row justify-content-center g-3">
        <!-- Search Input -->
        <div class="col-md-4">
            <div class="input-group">
                <span class="input-group-text bg-white text-primary ">
                </span>
                <input type="text" id="searchInput"
                       style="border-radius:8px ; padding-left: 10px;"
                       class="form-control  bg-white text-secondary"
                       placeholder="@(("ابحث باسم المنتج", "Search by product name").Localize(language))" />
            </div>
        </div>

        <!-- Category Filter -->
        <div class="col-md-4">
            <select id="categoryFilter" class="form-select filter-products">
                <option value="">@(("تصفية حسب الفئة", "Filter by category").Localize(language))</option>
                @foreach (var cat in Model.Categories)
                {
                    <option value="@cat.Id">@cat.Name</option>
                }
            </select>
        </div>

        <!-- Brand Filter -->
        <div class="col-md-4">
            <select id="brandFilter" class="form-select filter-products">
                <option value="">@(("تصفية حسب الماركه", "Filter by brand").Localize(language))</option>
                @foreach (var brand in Model.Brands)
                {
                    <option value="@brand.Name">@brand.Name</option>
                }
            </select>
        </div>
    </div>
</div>


<div id="productContainer">

    @{
        var emptyResult = new PagedResult<SimpleProductVM>
        {
            Items = new List<SimpleProductVM>(),
            PageNumber = 1,
            PageSize = 5,
            TotalItems = 0
        };
        await Html.RenderPartialAsync("PartialView/_Product", emptyResult);
    }
</div>

@section Scripts {
    <script>
         function confirmDisable(productId) {
            Swal.fire({
                title: 'هل أنت متأكد؟',
                text: "سيتم إلغاء تفعيل المنتج!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'نعم، قم بإلغاء التفعيل',
                cancelButtonText: 'إلغاء'
            }).then((result) => {
                if (result.isConfirmed) {
                    window.location.href = '/Product/DisableProduct/' + productId;
                }
            });

            return false; // prevent default <a> action
        }
         function bindClickableRows() {
            const rows = document.querySelectorAll(".clickable-row");
            rows.forEach(row => {
                row.addEventListener("click", function (e) {
                    // Prevent click if the target is a link or a checkbox
                    if (e.target.closest('a') || e.target.closest('button')) {
                        return;
                    }

                    const url = this.getAttribute("data-url");
                    if (url) {
                        window.location.href = url;
                    }
                });
            });
        }
        window.addEventListener("DOMContentLoaded", () => {
            loadProducts();

        });
        function loadProducts(categoryId = '',brand = '' , page = 1, searchText = '') {
            fetch(`/Product/FilterProducts?categoryId=${categoryId}&brand=${brand}&page=${page}&searchText=${encodeURIComponent(searchText)}`)
                .then(res => res.text())
                .then(html => {
                    document.getElementById("productContainer").innerHTML = html;
                     bindClickableRows();
                });
        }

        document.getElementById("categoryFilter").addEventListener("change", function () {
            let categoryId = this.value;
            loadProducts(categoryId);
        });
         document.getElementById("brandFilter").addEventListener("change", function () {
            let brand = this.value;
            let categoryId = document.getElementById("categoryFilter").value;
            loadProducts(categoryId, brand);
        });
        let debounceTimeout;
        document.getElementById("searchInput").addEventListener("input", function () {
            clearTimeout(debounceTimeout);
            const searchText = this.value;
            const categoryId = document.getElementById("categoryFilter").value;
            const brand = document.getElementById("brandFilter").value;
            debounceTimeout = setTimeout(() => {
                loadProducts(categoryId,brand, 1, searchText);
            }, 300); // wait 300ms after user stops typing
        });
        // لو عايزة تدعمي التنقل بين الصفحات عبر AJAX
        document.addEventListener("click", function (e) {
            if (e.target.matches(".ajax-page")) {
                e.preventDefault();
                const page = e.target.dataset.page;
                const searchText = document.getElementById("searchInput").value;
                const categoryId = document.getElementById("categoryFilter").value;
                const brand = document.getElementById("brandFilter").value;
                loadProducts(categoryId,brand, page, searchText);
            }
        });
        //    function bindSelection(){

        //        const bulkActionSelect = document.getElementById("bulkAction");

        // function updateBulkActions() {
        //     const checkboxes = document.querySelectorAll(".select-row");
        //     const checked = document.querySelectorAll(".select-row:checked");

        //     bulkActionSelect.innerHTML = '<option value="">Select Action</option>'; // Reset

        //     if (checked.length === 1) {
        //         bulkActionSelect.innerHTML += `
        //             <option value="edit">Edit</option>
        //             <option value="delete">Delete</option>
        //             <option value="details">Details</option>
        //         `;
        //     }
        //     else if (checked.length > 1 && checked.length < checkboxes.length) {
        //         bulkActionSelect.innerHTML += `
        //             <option value="delete">Delete</option>
        //             <option value="archive">Archive</option>
        //         `;
        //     }
        //     else if (checked.length === checkboxes.length && checkboxes.length > 0) {
        //         bulkActionSelect.innerHTML += `
        //             <option value="deleteAll">Delete All</option>
        //             <option value="archiveAll">Archive All</option>
        //         `;
        //     }
        // }

        // function getSelectedIds() {
        //     return Array.from(document.querySelectorAll(".select-row:checked")).map(cb => cb.value);
        // }

        // // Update dropdown when selection changes
        // document.addEventListener("change", function(e) {
        //     if (e.target.classList.contains("select-row") || e.target.id === "select-all") {
        //         updateBulkActions();
        //     }
        // });

        // // Trigger action immediately when dropdown changes
        // bulkActionSelect.addEventListener("change", function() {
        //     const action = this.value;
        //     const selectedIds = getSelectedIds();

        //     if (!action) return; // Do nothing if no action selected
        //     if (selectedIds.length === 0) {
        //         alert("Please select at least one category.");
        //         return;
        //     }

        //     switch(action) {
        //         case "edit":
        //             if (selectedIds.length > 1) {
        //                 alert("Edit is allowed for only one category.");
        //                 return;
        //             }
        //             window.location.href = `/Category/Edit/${selectedIds[0]}`;
        //             break;

        //         case "delete":
        //         case "deleteAll":
        //             if (confirm("Are you sure you want to delete?")) {
        //                 console.log("Deleting:", selectedIds);
        //                 // Call backend here
        //             }
        //             break;

        //         case "archive":
        //         case "archiveAll":
        //             if (confirm("Are you sure you want to archive?")) {
        //                 console.log("Archiving:", selectedIds);
        //                 // Call backend here
        //             }
        //             break;
        //     }

        //     // Reset dropdown after action
        //     this.value = "";
        // });
        // }
    </script>
}