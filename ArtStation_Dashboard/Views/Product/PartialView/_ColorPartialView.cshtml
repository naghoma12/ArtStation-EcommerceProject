@model ProductCreation
@{
    var language = ViewData["Language"] as string ?? "en";
    var colorCount = Model.Colors?.Count ?? 0;
}
<p class="text-muted fw-bold nav-heading mb-2 bol">
    <span>@(("الألوان", "Colors").Localize(language))</span>
</p>

<div id="Inputcolor">
    <div class="row g-2 align-items-end">
        <div class="col-md-3 d-flex gap-2">
            <input type="color" id="colorPicker" class="form-control form-control-color" title="Choose color" />
            <button type="button" id="addColorBtn" class="btn btn-outline-secondary">
                @(("إضافة اللون", "Add Color").Localize(language)) &#8594;
            </button>
        </div>
        <div class="col-md-5 mb-2">
            <label class="form-label">@(("اسم اللون", "Color Name").Localize(language))</label>
            <input type="text" id="colorName" class="form-control ps-2" readonly />
        </div>
    </div>
</div>

<!-- الألوان الحالية -->
<div id="dynamicColorInputs" class="mt-4">
    @for (int i = 0; i < colorCount; i++)
    {
        <div class="row g-2 align-items-end mb-2 border p-3 rounded bg-light">
            <div class="col-md-5">
                <label class="form-label">@(("الاسم", "Name").Localize(language))</label>
                <input type="text" name="Colors[@i].ColorName" class="form-control" value="@Model.Colors[i].Name" />
            </div>
            <div class="col-md-3">
                <label class="form-label">@(("اللون", "Color").Localize(language))</label>
                <input type="color" name="Colors[@i].Hex" class="form-control form-control-color" value="@Model.Colors[i].Hex" />
            </div>
            <div class="col-md-2 d-flex align-items-end">
                <button type="button" class="btn btn-danger w-100 deleteColorBtn">
                    @(("حذف", "Delete").Localize(language))
                </button>
            </div>
        </div>
    }
</div>

<input type="hidden" id="colorIndex" value="@colorCount" />

<script>
    let colorIndex = parseInt(document.getElementById('colorIndex')?.value || '0');
    const colorPicker = document.getElementById('colorPicker');
    const colorNameInput = document.getElementById('colorName');
    const addColorBtn = document.getElementById('addColorBtn');
    const dynamicColorInputs = document.getElementById('dynamicColorInputs');

    const labelColor = "@(("اللون", "Color").Localize(language))";
    const labelName = "@(("اسم اللون", "Color Name").Localize(language))";
    const deleteText = "@(("حذف", "Delete").Localize(language))";

    // استدعاء اسم اللون تلقائي من API
    colorPicker.addEventListener('input', () => {
        const hex = colorPicker.value.replace('#', '');
        fetch(`https://www.thecolorapi.com/id?hex=${hex}`)
            .then(res => res.json())
            .then(data => {
                colorNameInput.value = data.name.value;
            })
            .catch(() => {
                colorNameInput.value = "";
            });
    });

    addColorBtn.addEventListener('click', () => {
        const hexCode = colorPicker.value;
        const name = colorNameInput.value.trim();

        if (!hexCode || !name) {
            alert("يرجى اختيار اللون واسم صالح.");
            return;
        }

        const wrapper = document.createElement("div");
        wrapper.className = "row g-2 align-items-end mb-2 border p-3 rounded bg-light";

        wrapper.innerHTML = `
                <div class="col-md-5">
                    <label class="form-label">${labelName}</label>
                    <input type="text" name="Colors[${colorIndex}].Name" class="form-control" value="${name}" />
                </div>
                <div class="col-md-3">
                    <label class="form-label">${labelColor}</label>
                    <input type="color" name="Colors[${colorIndex}].Hex" class="form-control form-control-color" value="${hexCode}" />
                </div>
                <div class="col-md-2 d-flex align-items-end">
                    <button type="button" class="btn btn-danger w-100 deleteColorBtn">${deleteText}</button>
                </div>
            `;

        // حذف العنصر مع إعادة ترتيب الفهارس
        wrapper.querySelector(".deleteColorBtn").addEventListener("click", () => {
            wrapper.remove();
            resetColorIndexes();
        });

        dynamicColorInputs.appendChild(wrapper);

        // إعادة ضبط الحقول
        colorNameInput.value = "";
        colorIndex++;
    });

    // تحديث أسماء الحقول بعد حذف عنصر
    function resetColorIndexes() {
        const wrappers = document.querySelectorAll('#dynamicColorInputs .row');
        wrappers.forEach((wrapper, index) => {
            const nameInput = wrapper.querySelector('input[type="text"]');
            const colorInput = wrapper.querySelector('input[type="color"]');

            nameInput.name = `Colors[${index}].Name`;
            colorInput.name = `Colors[${index}].Hex`;
        });
        colorIndex = wrappers.length;
    }

    // تفعيل الحذف لعناصر Razor الموجودة
    document.querySelectorAll(".deleteColorBtn").forEach(btn => {
        btn.addEventListener("click", function () {
            this.closest(".row").remove();
            resetColorIndexes();
        });
    });
</script>
