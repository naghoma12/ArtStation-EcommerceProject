@model ProductCreation
@{
    var language = ViewData["Language"] as string ?? "en";
    var sizesCount = Model.Sizes?.Count ?? 0;
}

<p class="text-muted fw-bold nav-heading mt-4 mb-2 bol">
    <span>@((" الأحجام", "Sizes").Localize(language))</span>
</p>

<div id="SizeInput">

    <div class="row g-3 align-items-end">
        <div class="col-md-4">
            <div class="input-group input-group-static">
                <label class="form-label">@(("الحجم باللغه العربية", "Size in Arabic").Localize(language))</label>
                <input type="text" id="sizeAR" class="form-control" />
            </div>
        </div>
        <div class="col-md-4">
            <div class="input-group input-group-static">
                <label class="form-label">@(("الحجم باللغه الإنجليزية", "Size in English").Localize(language))</label>
                <input type="text" id="sizeEN" class="form-control" />
            </div>
        </div>
        <div class="col-md-4">
            <div class="input-group input-group-static">
                <label class="form-label">@(("سعر المنتج بهذا الحجم", "Product price for this size").Localize(language))</label>
                <input type="number" step="0.01" id="sizePrice" class="form-control" />
            </div>
        </div>
        <div class="col-md-3 d-flex align-items-end">
            <button type="button" id="addSizeBtn" class="btn btn-outline-secondary">
                @(("إضافة الحجم", "Add Size").Localize(language))
            </button>
        </div>
    </div>
</div>

<!-- Dynamic size inputs will be added here -->
<div id="dynamicSizeInputs" class="mt-4">
    @for (int i = 0; i < sizesCount; i++)
    {
        <input type="hidden" name="Sizes[@i].Id" value="@Model.Sizes[i].Id" />
        <div class="row g-3 align-items-end mb-2 border p-3 rounded bg-light size-row">
            <div class="col-md-3">
                <label class="form-label">@(("الحجم بالعربية", "Size (AR)").Localize(language))</label>
                <input type="text" name="Sizes[@i].SizeAR" class="form-control" value="@Model.Sizes[i].SizeAR" />
            </div>
            <div class="col-md-3">
                <label class="form-label">@(("الحجم بالإنجليزية", "Size (EN)").Localize(language))</label>
                <input type="text" name="Sizes[@i].SizeEN" class="form-control" value="@Model.Sizes[i].SizeEN" />
            </div>
            <div class="col-md-3">
                <label class="form-label">@(("السعر", "Price").Localize(language))</label>
                <input type="number" step="0.01" name="Sizes[@i].Price" class="form-control" value="@Model.Sizes[i].Price" />
            </div>
            <div class="col-md-3 d-flex align-items-end">
                <button type="button" class="btn btn-danger w-100 deleteSizeBtn">@(("حذف", "Delete").Localize(language))</button>
            </div>
        </div>
    }

</div>

<input type="hidden" id="sizeIndex" value="@sizesCount" />

    <script>
    let sizeIndex = parseInt(document.getElementById("sizeIndex").value);
    const addSizeBtn = document.getElementById("addSizeBtn");

    function reindexSizeInputs() {
        const sizeRows = document.querySelectorAll("#dynamicSizeInputs .size-row");
        sizeRows.forEach((row, newIndex) => {
            row.querySelector('input[name*=".Id"]').setAttribute("name", `Sizes[${newIndex}].Id`);
            row.querySelector('input[name*=".SizeAR"]').setAttribute("name", `Sizes[${newIndex}].SizeAR`);
            row.querySelector('input[name*=".SizeEN"]').setAttribute("name", `Sizes[${newIndex}].SizeEN`);
            row.querySelector('input[name*=".Price"]').setAttribute("name", `Sizes[${newIndex}].Price`);
        });
        document.getElementById("sizeIndex").value = sizeRows.length;
    }

    addSizeBtn.addEventListener("click", function () {
        const ar = document.getElementById("sizeAR").value.trim();
        const en = document.getElementById("sizeEN").value.trim();
        const price = document.getElementById("sizePrice").value.trim();

        if (!ar || !en || !price) {
            alert("Please fill in all fields.");
            return;
        }

        const wrapper = document.createElement("div");
        wrapper.className = "row g-3 align-items-end mb-2 border p-2 rounded bg-light size-row";
        wrapper.innerHTML = `
                        <input type="hidden" name="Sizes[${sizeIndex}].Id" value="0" />
                    <div class="col-md-3">
                        <label class="form-label">Size AR</label>
                            <input type="text" name="Sizes[${sizeIndex}].SizeAR" class="form-control" value="${ar}" />
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Size EN</label>
                            <input type="text" name="Sizes[${sizeIndex}].SizeEN" class="form-control" value="${en}" />
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Price</label>
                            <input type="number" name="Sizes[${sizeIndex}].Price" step="0.01" class="form-control" value="${price}" />
                    </div>
                    <div class="col-md-3 d-flex align-items-end">
                        <button type="button" class="btn btn-danger w-100 deleteSizeBtn">Delete</button>
                    </div>
                `;

        document.getElementById("dynamicSizeInputs").appendChild(wrapper);

        // Reset fields
        document.getElementById("sizeAR").value = "";
        document.getElementById("sizeEN").value = "";
        document.getElementById("sizePrice").value = "";

        // Re-attach delete event
        wrapper.querySelector(".deleteSizeBtn").addEventListener("click", function () {
            wrapper.remove();
            reindexSizeInputs();
        });

        reindexSizeInputs();
    });

    // Re-attach delete on existing inputs
    document.querySelectorAll(".deleteSizeBtn").forEach(btn => {
        btn.addEventListener("click", function () {
            this.closest(".size-row").remove();
            reindexSizeInputs();
        });
    });
    </script>

