@model PagedResult<Category>

@{
    var language = ViewData["Language"] as string ?? "en";
    ViewData["Title"] = ("مجموعة التصنيفات" , "Category List").Localize(language);
}
<style>
    .clickable-row:hover {
        background-color: #f5f5f5;
    }

    .bulk-action-select {
        min-width: 180px;
        padding: 6px 12px;
        border-radius: 8px;
        border: 1px solid #ced4da;
        background-color: #fff;
        color: gray;
        font-weight: 500;
        transition: all 0.2s ease-in-out;
        padding : 10px;
    }


        .bulk-action-select:focus {
            border-color: #4e73df; /* Primary color */
            box-shadow: 0 0 0 0.2rem rgba(78, 115, 223, 0.25);
        }

        .bulk-action-select option {
            padding: 12px;
        }
</style>
@if (!string.IsNullOrEmpty(TempData["Message"] as string))
{
    <div class="alert alert-success mt-3 mb-2 text-white">
        @TempData["message"]
    </div>
}

<div class="d-flex justify-content-center my-3">
    <div class="col-md-4">
        <div class="input-group">
            <input type="text" id="categorySearch"
                   style="border-radius:8px ; padding-left: 10px;"
                   class="form-control  bg-white text-secondary"
                   placeholder="@(("ابحث باسم التصنيف", "Search by Category name").Localize(language))" />
        </div>
    </div>
</div>

<div id="categoryContainer">
    @{
        var empty = new PagedResult<Category>
            {
                Items = new List<Category>(),
                PageNumber = 1,
                PageSize = 5,
                TotalItems = 0
            };
        await Html.RenderPartialAsync("_Category", empty);
    }
</div>
@section Scripts {
    <script>
        function bindClickableRows() {
            const rows = document.querySelectorAll(".clickable-row");
            rows.forEach(row => {
                row.addEventListener("click", function (e) {
                    // Prevent click if the target is a link or a checkbox
                    if (e.target.closest('a') || e.target.closest('button')) {
                        return;
                    }

                    const url = this.getAttribute("data-url");
                    if (url) {
                        window.location.href = url;
                    }
                });
            });
        }

        function loadCategories(page = 1, searchText = '') {
            fetch(`/Category/FilterCategories?page=${page}&searchText=${encodeURIComponent(searchText)}`)
                .then(res => res.text())
                .then(html => {
                    document.getElementById("categoryContainer").innerHTML = html;
                    // bindSelectAllCheckbox(); // re-bind after load
                     bindClickableRows(); // re-bind row click events
                    //bindSelection();
                });
        }

                    document.addEventListener("DOMContentLoaded", () => {
            loadCategories(); // load on page start

            // const bulkActionSelect = document.getElementById("bulkActionSelect");
            // if (bulkActionSelect) {
            //     bulkActionSelect.addEventListener("change", handleBulkAction);
            // }
        });

        // function handleBulkAction() {
        //     const action = this.value;
        //     const selectedIds = getSelectedIds();

        //     if (!action) return;
        //     if (selectedIds.length === 0) {
        //         alert("Please select at least one category.");
        //         this.value = "";
        //         return;
        //     }

        //     switch (action) {
        //         case "edit":
        //             if (selectedIds.length > 1) {
        //                 alert("Edit is allowed for only one category.");
        //                 break;
        //             }
        //             window.location.href = `/Category/Edit/${selectedIds[0]}`;
        //             break;

        //         case "details":
        //             if (selectedIds.length > 1) {
        //                 alert("Details is allowed for only one category.");
        //                 break;
        //             }
        //             window.location.href = `/Category/Details/${selectedIds[0]}`;
        //             break;

        //         case "delete":
        //             if (selectedIds.length === 1) {
        //                 window.location.href = `/Category/Delete/${selectedIds[0]}`;
        //             } else {
        //                 if (confirm("Are you sure you want to delete selected categories?")) {
        //                     fetch(`/Category/BulkDelete`, {
        //                         method: "POST",
        //                         headers: {
        //                             "Content-Type": "application/json",
        //                             "RequestVerificationToken": document.querySelector('input[name="__RequestVerificationToken"]').value
        //                         },
        //                         body: JSON.stringify(selectedIds)
        //                     }).then(res => res.ok ? location.reload() : alert("Failed to delete categories."));
        //                 }
        //             }
        //             break;

        //         case "deleteAll":
        //             if (confirm("Are you sure you want to delete ALL categories?")) {
        //                 fetch(`/Category/BulkDeleteAll`, {
        //                     method: "POST",
        //                     headers: {
        //                         "RequestVerificationToken": document.querySelector('input[name="__RequestVerificationToken"]').value
        //                     }
        //                 }).then(res => res.ok ? location.reload() : alert("Failed to delete all categories."));
        //             }
        //             break;
        //     }

        //     this.value = "";
        // }
        document.getElementById("categorySearch").addEventListener("input", function () {
            clearTimeout(window.debounceTimeout);
            const search = this.value;
            window.debounceTimeout = setTimeout(() => {
                loadCategories(1, search);
            }, 300);
        });

        document.addEventListener("click", function (e) {
            if (e.target.matches(".ajax-page")) {
                e.preventDefault();
                const page = e.target.dataset.page;
                const searchText = document.getElementById("categorySearch").value;
                loadCategories(page, searchText);
            }
        });
        

    </script>
}